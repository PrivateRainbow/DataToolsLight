/****** Object:  DATABASE NORTHWND    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE DATABASE NORTHWND;
GO
USE NORTHWND;



/****** Object:  TABLE [dbo].[Orders]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[Orders] (
[OrderID] int NOT NULL IDENTITY(1,1),
[CustomerID] nchar(10),
[EmployeeID] int,
[OrderDate] datetime,
[RequiredDate] datetime,
[ShippedDate] datetime,
[ShipVia] int,
[Freight] money,
[ShipName] nvarchar(80),
[ShipAddress] nvarchar(120),
[ShipCity] nvarchar(30),
[ShipRegion] nvarchar(30),
[ShipPostalCode] nvarchar(20),
[ShipCountry] nvarchar(30)
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Orders] ADD CONSTRAINT PK_Orders PRIMARY KEY(OrderID)
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Orders] ADD CONSTRAINT [FK_Orders_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [Customers]([CustomerID])   
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Orders] ADD CONSTRAINT [FK_Orders_Employees] FOREIGN KEY ([EmployeeID]) REFERENCES [Employees]([EmployeeID])   
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Orders] ADD CONSTRAINT [FK_Orders_Shippers] FOREIGN KEY ([ShipVia]) REFERENCES [Shippers]([ShipperID])   
GO

/****** Object:  DEFAULT CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Orders] ADD CONSTRAINT [DF_Orders_Freight] DEFAULT (0) FOR [Freight]
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [CustomerID] ON [dbo].[Orders] ([CustomerID]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [CustomersOrders] ON [dbo].[Orders] ([CustomerID]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [EmployeeID] ON [dbo].[Orders] ([EmployeeID]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [EmployeesOrders] ON [dbo].[Orders] ([EmployeeID]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [OrderDate] ON [dbo].[Orders] ([OrderDate]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [ShippedDate] ON [dbo].[Orders] ([ShippedDate]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [ShippersOrders] ON [dbo].[Orders] ([ShipVia]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [ShipPostalCode] ON [dbo].[Orders] ([ShipPostalCode]);
GO


/****** Object:  TABLE [dbo].[Products]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[Products] (
[ProductID] int NOT NULL IDENTITY(1,1),
[ProductName] nvarchar(80) NOT NULL,
[SupplierID] int,
[CategoryID] int,
[QuantityPerUnit] nvarchar(40),
[UnitPrice] money,
[UnitsInStock] smallint,
[UnitsOnOrder] smallint,
[ReorderLevel] smallint,
[Discontinued] bit NOT NULL
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT PK_Products PRIMARY KEY(ProductID)
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT [FK_Products_Suppliers] FOREIGN KEY ([SupplierID]) REFERENCES [Suppliers]([SupplierID])   
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT [FK_Products_Categories] FOREIGN KEY ([CategoryID]) REFERENCES [Categories]([CategoryID])   
GO

/****** Object:  DEFAULT CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT [DF_Products_UnitPrice] DEFAULT (0) FOR [UnitPrice]
GO

/****** Object:  DEFAULT CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT [DF_Products_UnitsInStock] DEFAULT (0) FOR [UnitsInStock]
GO

/****** Object:  DEFAULT CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT [DF_Products_UnitsOnOrder] DEFAULT (0) FOR [UnitsOnOrder]
GO

/****** Object:  DEFAULT CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT [DF_Products_ReorderLevel] DEFAULT (0) FOR [ReorderLevel]
GO

/****** Object:  DEFAULT CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT [DF_Products_Discontinued] DEFAULT (0) FOR [Discontinued]
GO

/****** Object:  CHECKED CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT UnitPrice CHECK ([UnitPrice] >= 0);
GO

/****** Object:  CHECKED CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT ReorderLevel CHECK ([ReorderLevel] >= 0);
GO

/****** Object:  CHECKED CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT UnitsInStock CHECK ([UnitsInStock] >= 0);
GO

/****** Object:  CHECKED CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Products] ADD CONSTRAINT UnitsOnOrder CHECK ([UnitsOnOrder] >= 0);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [CategoriesProducts] ON [dbo].[Products] ([CategoryID]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [CategoryID] ON [dbo].[Products] ([CategoryID]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [ProductName] ON [dbo].[Products] ([ProductName]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [SupplierID] ON [dbo].[Products] ([SupplierID]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [SuppliersProducts] ON [dbo].[Products] ([SupplierID]);
GO


/****** Object:  TABLE [dbo].[Order Details]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[Order Details] (
[OrderID] int NOT NULL,
[ProductID] int NOT NULL,
[UnitPrice] money NOT NULL,
[Quantity] smallint NOT NULL,
[Discount] real NOT NULL
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Order Details] ADD CONSTRAINT PK_Order_Details PRIMARY KEY(OrderID,ProductID)
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Order Details] ADD CONSTRAINT [FK_Order_Details_Orders] FOREIGN KEY ([OrderID]) REFERENCES [Orders]([OrderID])   
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Order Details] ADD CONSTRAINT [FK_Order_Details_Products] FOREIGN KEY ([ProductID]) REFERENCES [Products]([ProductID])   
GO

/****** Object:  DEFAULT CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Order Details] ADD CONSTRAINT [DF_Order_Details_UnitPrice] DEFAULT (0) FOR [UnitPrice]
GO

/****** Object:  DEFAULT CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Order Details] ADD CONSTRAINT [DF_Order_Details_Quantity] DEFAULT (1) FOR [Quantity]
GO

/****** Object:  DEFAULT CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Order Details] ADD CONSTRAINT [DF_Order_Details_Discount] DEFAULT (0) FOR [Discount]
GO

/****** Object:  CHECKED CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Order Details] ADD CONSTRAINT Discount CHECK ([Discount] >= 0 and [Discount] <= 1);
GO

/****** Object:  CHECKED CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Order Details] ADD CONSTRAINT Quantity CHECK ([Quantity] > 0);
GO

/****** Object:  CHECKED CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Order Details] ADD CONSTRAINT UnitPrice CHECK ([UnitPrice] >= 0);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [OrderID] ON [dbo].[Order Details] ([OrderID]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [OrdersOrder_Details] ON [dbo].[Order Details] ([OrderID]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [ProductID] ON [dbo].[Order Details] ([ProductID]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [ProductsOrder_Details] ON [dbo].[Order Details] ([ProductID]);
GO


/****** Object:  TABLE [dbo].[CustomerCustomerDemo]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[CustomerCustomerDemo] (
[CustomerID] nchar(10) NOT NULL,
[CustomerTypeID] nchar(20) NOT NULL
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[CustomerCustomerDemo] ADD CONSTRAINT PK_CustomerCustomerDemo PRIMARY KEY(CustomerID,CustomerTypeID)
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[CustomerCustomerDemo] ADD CONSTRAINT [FK_CustomerCustomerDemo_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [Customers]([CustomerID])   
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[CustomerCustomerDemo] ADD CONSTRAINT [FK_CustomerCustomerDemo] FOREIGN KEY ([CustomerTypeID]) REFERENCES [CustomerDemographics]([CustomerTypeID])   
GO


/****** Object:  TABLE [dbo].[CustomerDemographics]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[CustomerDemographics] (
[CustomerTypeID] nchar(20) NOT NULL,
[CustomerDesc] ntext
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[CustomerDemographics] ADD CONSTRAINT PK_CustomerDemographics PRIMARY KEY(CustomerTypeID)
GO


/****** Object:  TABLE [dbo].[Region]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[Region] (
[RegionID] int NOT NULL,
[RegionDescription] nchar(100) NOT NULL
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Region] ADD CONSTRAINT PK_Region PRIMARY KEY(RegionID)
GO


/****** Object:  TABLE [dbo].[Territories]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[Territories] (
[TerritoryID] nvarchar(40) NOT NULL,
[TerritoryDescription] nchar(100) NOT NULL,
[RegionID] int NOT NULL
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Territories] ADD CONSTRAINT PK_Territories PRIMARY KEY(TerritoryID)
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Territories] ADD CONSTRAINT [FK_Territories_Region] FOREIGN KEY ([RegionID]) REFERENCES [Region]([RegionID])   
GO


/****** Object:  TABLE [dbo].[EmployeeTerritories]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[EmployeeTerritories] (
[EmployeeID] int NOT NULL,
[TerritoryID] nvarchar(40) NOT NULL
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[EmployeeTerritories] ADD CONSTRAINT PK_EmployeeTerritories PRIMARY KEY(EmployeeID,TerritoryID)
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[EmployeeTerritories] ADD CONSTRAINT [FK_EmployeeTerritories_Employees] FOREIGN KEY ([EmployeeID]) REFERENCES [Employees]([EmployeeID])   
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[EmployeeTerritories] ADD CONSTRAINT [FK_EmployeeTerritories_Territories] FOREIGN KEY ([TerritoryID]) REFERENCES [Territories]([TerritoryID])   
GO


/****** Object:  TABLE [dbo].[sysdiagrams]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[sysdiagrams] (
[name] sysname NOT NULL,
[principal_id] int NOT NULL,
[diagram_id] int NOT NULL IDENTITY(1,1),
[version] int,
[definition] varbinary
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[sysdiagrams] ADD CONSTRAINT PK__sysdiagrams__48CFD27E PRIMARY KEY(diagram_id)
GO

/****** Object:  UNIQUE CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[sysdiagrams] ADD CONSTRAINT UK_principal_name UNIQUE (principal_id) 
GO

/****** Object:  UNIQUE CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[sysdiagrams] ADD CONSTRAINT UK_principal_name UNIQUE (name) 
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE UNIQUE INDEX [UK_principal_name] ON [dbo].[sysdiagrams] ([principal_id]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE UNIQUE INDEX [UK_principal_name] ON [dbo].[sysdiagrams] ([name]);
GO


/****** Object:  TABLE [dbo].[Employees]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[Employees] (
[EmployeeID] int NOT NULL IDENTITY(1,1),
[LastName] nvarchar(40) NOT NULL,
[FirstName] nvarchar(20) NOT NULL,
[Title] nvarchar(60),
[TitleOfCourtesy] nvarchar(50),
[BirthDate] datetime,
[HireDate] datetime,
[Address] nvarchar(120),
[City] nvarchar(30),
[Region] nvarchar(30),
[PostalCode] nvarchar(20),
[Country] nvarchar(30),
[HomePhone] nvarchar(48),
[Extension] nvarchar(8),
[Photo] image,
[Notes] ntext,
[ReportsTo] int,
[PhotoPath] nvarchar(510)
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Employees] ADD CONSTRAINT PK_Employees PRIMARY KEY(EmployeeID)
GO

/****** Object:  FOREIGN KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Employees] ADD CONSTRAINT [FK_Employees_Employees] FOREIGN KEY ([ReportsTo]) REFERENCES [Employees]([EmployeeID])   
GO

/****** Object:  CHECKED CONSTRAINT     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Employees] ADD CONSTRAINT BirthDate CHECK ([BirthDate] < getdate());
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [LastName] ON [dbo].[Employees] ([LastName]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [PostalCode] ON [dbo].[Employees] ([PostalCode]);
GO


/****** Object:  TABLE [dbo].[Categories]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[Categories] (
[CategoryID] int NOT NULL IDENTITY(1,1),
[CategoryName] nvarchar(30) NOT NULL,
[Description] ntext,
[Picture] image
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Categories] ADD CONSTRAINT PK_Categories PRIMARY KEY(CategoryID)
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [CategoryName] ON [dbo].[Categories] ([CategoryName]);
GO


/****** Object:  TABLE [dbo].[Customers]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[Customers] (
[CustomerID] nchar(10) NOT NULL,
[CompanyName] nvarchar(80) NOT NULL,
[ContactName] nvarchar(60),
[ContactTitle] nvarchar(60),
[Address] nvarchar(120),
[City] nvarchar(30),
[Region] nvarchar(30),
[PostalCode] nvarchar(20),
[Country] nvarchar(30),
[Phone] nvarchar(48),
[Fax] nvarchar(48)
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Customers] ADD CONSTRAINT PK_Customers PRIMARY KEY(CustomerID)
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [City] ON [dbo].[Customers] ([City]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [CompanyName] ON [dbo].[Customers] ([CompanyName]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [PostalCode] ON [dbo].[Customers] ([PostalCode]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [Region] ON [dbo].[Customers] ([Region]);
GO


/****** Object:  TABLE [dbo].[Shippers]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[Shippers] (
[ShipperID] int NOT NULL IDENTITY(1,1),
[CompanyName] nvarchar(80) NOT NULL,
[Phone] nvarchar(48)
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Shippers] ADD CONSTRAINT PK_Shippers PRIMARY KEY(ShipperID)
GO


/****** Object:  TABLE [dbo].[Suppliers]    Script Date: 8/3/2017 7:04:24 PM ******/
CREATE TABLE [dbo].[Suppliers] (
[SupplierID] int NOT NULL IDENTITY(1,1),
[CompanyName] nvarchar(80) NOT NULL,
[ContactName] nvarchar(60),
[ContactTitle] nvarchar(60),
[Address] nvarchar(120),
[City] nvarchar(30),
[Region] nvarchar(30),
[PostalCode] nvarchar(20),
[Country] nvarchar(30),
[Phone] nvarchar(48),
[Fax] nvarchar(48),
[HomePage] ntext
);
GO


/****** Object:  PRIMARY KEY     Script Date: 8/3/2017 7:04:24 PM ******/
ALTER TABLE [dbo].[Suppliers] ADD CONSTRAINT PK_Suppliers PRIMARY KEY(SupplierID)
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [CompanyName] ON [dbo].[Suppliers] ([CompanyName]);
GO

/****** Object:  INDEX     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE  INDEX [PostalCode] ON [dbo].[Suppliers] ([PostalCode]);
GO





/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Customer and Suppliers by City" AS
SELECT City, CompanyName, ContactName, 'Customers' AS Relationship 
FROM Customers
UNION SELECT City, CompanyName, ContactName, 'Suppliers'
FROM Suppliers
--ORDER BY City, CompanyName

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Alphabetical list of products" AS
SELECT Products.*, Categories.CategoryName
FROM Categories INNER JOIN Products ON Categories.CategoryID = Products.CategoryID
WHERE (((Products.Discontinued)=0))

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Current Product List" AS
SELECT Product_List.ProductID, Product_List.ProductName
FROM Products AS Product_List
WHERE (((Product_List.Discontinued)=0))
--ORDER BY Product_List.ProductName

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Orders Qry" AS
SELECT Orders.OrderID, Orders.CustomerID, Orders.EmployeeID, Orders.OrderDate, Orders.RequiredDate, 
	Orders.ShippedDate, Orders.ShipVia, Orders.Freight, Orders.ShipName, Orders.ShipAddress, Orders.ShipCity, 
	Orders.ShipRegion, Orders.ShipPostalCode, Orders.ShipCountry, 
	Customers.CompanyName, Customers.Address, Customers.City, Customers.Region, Customers.PostalCode, Customers.Country
FROM Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Products Above Average Price" AS
SELECT Products.ProductName, Products.UnitPrice
FROM Products
WHERE Products.UnitPrice>(SELECT AVG(UnitPrice) From Products)
--ORDER BY Products.UnitPrice DESC

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Products by Category" AS
SELECT Categories.CategoryName, Products.ProductName, Products.QuantityPerUnit, Products.UnitsInStock, Products.Discontinued
FROM Categories INNER JOIN Products ON Categories.CategoryID = Products.CategoryID
WHERE Products.Discontinued <> 1
--ORDER BY Categories.CategoryName, Products.ProductName

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Quarterly Orders" AS
SELECT DISTINCT Customers.CustomerID, Customers.CompanyName, Customers.City, Customers.Country
FROM Customers RIGHT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
WHERE Orders.OrderDate BETWEEN '19970101' And '19971231'

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view Invoices AS
SELECT Orders.ShipName, Orders.ShipAddress, Orders.ShipCity, Orders.ShipRegion, Orders.ShipPostalCode, 
	Orders.ShipCountry, Orders.CustomerID, Customers.CompanyName AS CustomerName, Customers.Address, Customers.City, 
	Customers.Region, Customers.PostalCode, Customers.Country, 
	(FirstName + ' ' + LastName) AS Salesperson, 
	Orders.OrderID, Orders.OrderDate, Orders.RequiredDate, Orders.ShippedDate, Shippers.CompanyName As ShipperName, 
	"Order Details".ProductID, Products.ProductName, "Order Details".UnitPrice, "Order Details".Quantity, 
	"Order Details".Discount, 
	(CONVERT(money,("Order Details".UnitPrice*Quantity*(1-Discount)/100))*100) AS ExtendedPrice, Orders.Freight
FROM 	Shippers INNER JOIN 
		(Products INNER JOIN 
			(
				(Employees INNER JOIN 
					(Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID) 
				ON Employees.EmployeeID = Orders.EmployeeID) 
			INNER JOIN "Order Details" ON Orders.OrderID = "Order Details".OrderID) 
		ON Products.ProductID = "Order Details".ProductID) 
	ON Shippers.ShipperID = Orders.ShipVia

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Order Details Extended" AS
SELECT "Order Details".OrderID, "Order Details".ProductID, Products.ProductName, 
	"Order Details".UnitPrice, "Order Details".Quantity, "Order Details".Discount, 
	(CONVERT(money,("Order Details".UnitPrice*Quantity*(1-Discount)/100))*100) AS ExtendedPrice
FROM Products INNER JOIN "Order Details" ON Products.ProductID = "Order Details".ProductID
--ORDER BY "Order Details".OrderID

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Order Subtotals" AS
SELECT "Order Details".OrderID, Sum(CONVERT(money,("Order Details".UnitPrice*Quantity*(1-Discount)/100))*100) AS Subtotal
FROM "Order Details"
GROUP BY "Order Details".OrderID

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Product Sales for 1997" AS
SELECT Categories.CategoryName, Products.ProductName, 
Sum(CONVERT(money,("Order Details".UnitPrice*Quantity*(1-Discount)/100))*100) AS ProductSales
FROM (Categories INNER JOIN Products ON Categories.CategoryID = Products.CategoryID) 
	INNER JOIN (Orders 
		INNER JOIN "Order Details" ON Orders.OrderID = "Order Details".OrderID) 
	ON Products.ProductID = "Order Details".ProductID
WHERE (((Orders.ShippedDate) Between '19970101' And '19971231'))
GROUP BY Categories.CategoryName, Products.ProductName

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Category Sales for 1997" AS
SELECT "Product Sales for 1997".CategoryName, Sum("Product Sales for 1997".ProductSales) AS CategorySales
FROM "Product Sales for 1997"
GROUP BY "Product Sales for 1997".CategoryName

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Sales by Category" AS
SELECT Categories.CategoryID, Categories.CategoryName, Products.ProductName, 
	Sum("Order Details Extended".ExtendedPrice) AS ProductSales
FROM 	Categories INNER JOIN 
		(Products INNER JOIN 
			(Orders INNER JOIN "Order Details Extended" ON Orders.OrderID = "Order Details Extended".OrderID) 
		ON Products.ProductID = "Order Details Extended".ProductID) 
	ON Categories.CategoryID = Products.CategoryID
WHERE Orders.OrderDate BETWEEN '19970101' And '19971231'
GROUP BY Categories.CategoryID, Categories.CategoryName, Products.ProductName
--ORDER BY Products.ProductName

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Sales Totals by Amount" AS
SELECT "Order Subtotals".Subtotal AS SaleAmount, Orders.OrderID, Customers.CompanyName, Orders.ShippedDate
FROM 	Customers INNER JOIN 
		(Orders INNER JOIN "Order Subtotals" ON Orders.OrderID = "Order Subtotals".OrderID) 
	ON Customers.CustomerID = Orders.CustomerID
WHERE ("Order Subtotals".Subtotal >2500) AND (Orders.ShippedDate BETWEEN '19970101' And '19971231')

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Summary of Sales by Quarter" AS
SELECT Orders.ShippedDate, Orders.OrderID, "Order Subtotals".Subtotal
FROM Orders INNER JOIN "Order Subtotals" ON Orders.OrderID = "Order Subtotals".OrderID
WHERE Orders.ShippedDate IS NOT NULL
--ORDER BY Orders.ShippedDate

GO

/****** Object:  VIEW     Script Date: 8/3/2017 7:04:24 PM ******/

create view "Summary of Sales by Year" AS
SELECT Orders.ShippedDate, Orders.OrderID, "Order Subtotals".Subtotal
FROM Orders INNER JOIN "Order Subtotals" ON Orders.OrderID = "Order Subtotals".OrderID
WHERE Orders.ShippedDate IS NOT NULL
--ORDER BY Orders.ShippedDate

GO




/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

create procedure "Ten Most Expensive Products" AS
SET ROWCOUNT 10
SELECT Products.ProductName AS TenMostExpensiveProducts, Products.UnitPrice
FROM Products
ORDER BY Products.UnitPrice DESC

GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

create procedure "Employee Sales by Country" 
@Beginning_Date DateTime, @Ending_Date DateTime AS
SELECT Employees.Country, Employees.LastName, Employees.FirstName, Orders.ShippedDate, Orders.OrderID, "Order Subtotals".Subtotal AS SaleAmount
FROM Employees INNER JOIN 
	(Orders INNER JOIN "Order Subtotals" ON Orders.OrderID = "Order Subtotals".OrderID) 
	ON Employees.EmployeeID = Orders.EmployeeID
WHERE Orders.ShippedDate Between @Beginning_Date And @Ending_Date

GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

create procedure "Sales by Year" 
	@Beginning_Date DateTime, @Ending_Date DateTime AS
SELECT Orders.ShippedDate, Orders.OrderID, "Order Subtotals".Subtotal, DATENAME(yy,ShippedDate) AS Year
FROM Orders INNER JOIN "Order Subtotals" ON Orders.OrderID = "Order Subtotals".OrderID
WHERE Orders.ShippedDate Between @Beginning_Date And @Ending_Date

GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

CREATE PROCEDURE CustOrdersDetail @OrderID int
AS
SELECT ProductName,
    UnitPrice=ROUND(Od.UnitPrice, 2),
    Quantity,
    Discount=CONVERT(int, Discount * 100), 
    ExtendedPrice=ROUND(CONVERT(money, Quantity * (1 - Discount) * Od.UnitPrice), 2)
FROM Products P, [Order Details] Od
WHERE Od.ProductID = P.ProductID and Od.OrderID = @OrderID

GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

CREATE PROCEDURE CustOrdersOrders @CustomerID nchar(5)
AS
SELECT OrderID, 
	OrderDate,
	RequiredDate,
	ShippedDate
FROM Orders
WHERE CustomerID = @CustomerID
ORDER BY OrderID

GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE PROCEDURE CustOrderHist @CustomerID nchar(5)
AS
SELECT ProductName, Total=SUM(Quantity)
FROM Products P, [Order Details] OD, Orders O, Customers C
WHERE C.CustomerID = @CustomerID
AND C.CustomerID = O.CustomerID AND O.OrderID = OD.OrderID AND OD.ProductID = P.ProductID
GROUP BY ProductName

GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/
CREATE PROCEDURE SalesByCategory
    @CategoryName nvarchar(15), @OrdYear nvarchar(4) = '1998'
AS
IF @OrdYear != '1996' AND @OrdYear != '1997' AND @OrdYear != '1998' 
BEGIN
	SELECT @OrdYear = '1998'
END

SELECT ProductName,
	TotalPurchase=ROUND(SUM(CONVERT(decimal(14,2), OD.Quantity * (1-OD.Discount) * OD.UnitPrice)), 0)
FROM [Order Details] OD, Orders O, Products P, Categories C
WHERE OD.OrderID = O.OrderID 
	AND OD.ProductID = P.ProductID 
	AND P.CategoryID = C.CategoryID
	AND C.CategoryName = @CategoryName
	AND SUBSTRING(CONVERT(nvarchar(22), O.OrderDate, 111), 1, 4) = @OrdYear
GROUP BY ProductName
ORDER BY ProductName

GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

	CREATE PROCEDURE dbo.sp_upgraddiagrams
	AS
	BEGIN
		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL
			return 0;
	
		CREATE TABLE dbo.sysdiagrams
		(
			name sysname NOT NULL,
			principal_id int NOT NULL,	-- we may change it to varbinary(85)
			diagram_id int PRIMARY KEY IDENTITY,
			version int,
	
			definition varbinary(max)
			CONSTRAINT UK_principal_name UNIQUE
			(
				principal_id,
				name
			)
		);


		/* Add this if we need to have some form of extended properties for diagrams */
		/*
		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL
		BEGIN
			CREATE TABLE dbo.sysdiagram_properties
			(
				diagram_id int,
				name sysname,
				value varbinary(max) NOT NULL
			)
		END
		*/

		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL
		begin
			insert into dbo.sysdiagrams
			(
				[name],
				[principal_id],
				[version],
				[definition]
			)
			select	 
				convert(sysname, dgnm.[uvalue]),
				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa
				0,							-- zero for old format, dgdef.[version],
				dgdef.[lvalue]
			from dbo.[dtproperties] dgnm
				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]	
				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid]
				
			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_' 
			return 2;
		end
		return 1;
	END
	
GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

	CREATE PROCEDURE dbo.sp_helpdiagrams
	(
		@diagramname sysname = NULL,
		@owner_id int = NULL
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		DECLARE @user sysname
		DECLARE @dboLogin bit
		EXECUTE AS CALLER;
			SET @user = USER_NAME();
			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));
		REVERT;
		SELECT
			[Database] = DB_NAME(),
			[Name] = name,
			[ID] = diagram_id,
			[Owner] = USER_NAME(principal_id),
			[OwnerID] = principal_id
		FROM
			sysdiagrams
		WHERE
			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND
			(@diagramname IS NULL OR name = @diagramname) AND
			(@owner_id IS NULL OR principal_id = @owner_id)
		ORDER BY
			4, 5, 1
	END
	
GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

	CREATE PROCEDURE dbo.sp_helpdiagramdefinition
	(
		@diagramname 	sysname,
		@owner_id	int	= null 		
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		set nocount on

		declare @theId 		int
		declare @IsDbo 		int
		declare @DiagId		int
		declare @UIDFound	int
	
		if(@diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		revert; 
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname;
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId ))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end

		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ; 
		return 0
	END
	
GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

	CREATE PROCEDURE dbo.sp_creatediagram
	(
		@diagramname 	sysname,
		@owner_id		int	= null, 	
		@version 		int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId int
		declare @retval int
		declare @IsDbo	int
		declare @userName sysname
		if(@version is null or @diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID(); 
		select @IsDbo = IS_MEMBER(N'db_owner');
		revert; 
		
		if @owner_id is null
		begin
			select @owner_id = @theId;
		end
		else
		begin
			if @theId <> @owner_id
			begin
				if @IsDbo = 0
				begin
					RAISERROR (N'E_INVALIDARG', 16, 1);
					return -1
				end
				select @theId = @owner_id
			end
		end
		-- next 2 line only for test, will be removed after define name unique
		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end
	
		insert into dbo.sysdiagrams(name, principal_id , version, definition)
				VALUES(@diagramname, @theId, @version, @definition) ;
		
		select @retval = @@IDENTITY 
		return @retval
	END
	
GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

	CREATE PROCEDURE dbo.sp_renamediagram
	(
		@diagramname 		sysname,
		@owner_id		int	= null,
		@new_diagramname	sysname
	
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @DiagIdTarg		int
		declare @u_name			sysname
		if((@diagramname is null) or (@new_diagramname is null))
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT;
	
		select @u_name = USER_NAME(@owner_id)
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change
		--	return 0;
	
		if(@u_name is null)
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname
		else
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname
	
		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end		
	
		if(@u_name is null)
			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId
		else
			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId
		return 0
	END
	
GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

	CREATE PROCEDURE dbo.sp_alterdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null,
		@version 	int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId 			int
		declare @retval 		int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @ShouldChangeUID	int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid ARG', 16, 1)
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();	 
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		revert;
	
		select @ShouldChangeUID = 0
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		
		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
	
		if(@IsDbo <> 0)
		begin
			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id
			begin
				select @ShouldChangeUID = 1 ;
			end
		end

		-- update dds data			
		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;

		-- change owner
		if(@ShouldChangeUID = 1)
			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;

		-- update dds version
		if(@version is not null)
			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;

		return 0
	END
	
GO

/****** Object:  PROCEDURE     Script Date: 8/3/2017 7:04:24 PM ******/

	CREATE PROCEDURE dbo.sp_dropdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT; 
		
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		delete from dbo.sysdiagrams where diagram_id = @DiagId;
	
		return 0;
	END
	
GO


